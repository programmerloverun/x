(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@ant-design/x"]||[]).push([["52fea4b0"],{"52fea4b0":function(e,n,a){"use strict";a.d(n,"__esModule",{value:!0}),a.d(n,"texts",{enumerable:!0,get:function(){return t;}}),a("f8ab0386");let t=[{value:"Typically, ",paraId:0},{value:"openai-node",paraId:0},{value:" is used in Node.js environments. If you need to use it in a browser environment, you must enable ",paraId:0},{value:"dangerouslyAllowBrowser",paraId:0},{value:".",paraId:0},{value:"openai-node",paraId:1},{value:"import { useXAgent, useXChat, Sender } from '@ant-design/x';\nimport OpenAI from 'openai';\n\nconst client = new OpenAI({\n  apiKey: process.env['OPENAI_API_KEY'],\n  dangerouslyAllowBrowser: true,\n});\n\n// React environment setup\nconst [agent] = useXAgent({\n  request: async (info, callbacks) => {\n    const stream = await client.chat.completions.create({\n      model: 'gpt-4o',\n      messages: [{ role: 'user', content: 'Say this is a test' }],\n      stream: true,\n    });\n\n    for await (const chunk of stream) {\n      // Trigger the callback\n      callbacks.onUpdate(chunk.choices[0]?.delta?.content || '');\n    }\n  },\n});\n\nconst {\n  // Used to initiate conversation requests\n  onRequest,\n  // Used to bind the view\n  messages,\n} = useXChat({ agent });\n\nconst items = messages.map((message) => ({\n  content: message,\n}));\n\nreturn (\n  <div>\n    <Bubble.List items={items} />\n    <Sender onSubmit={onRequest} />\n  </div>\n);\n",paraId:2,tocIndex:0},{value:"\u53C2\u8003 ",paraId:3,tocIndex:1},{value:"Compatible OpenAI",paraId:4,tocIndex:1}];}}]);
//# sourceMappingURL=52fea4b0-async.62119126.js.map